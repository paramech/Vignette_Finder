# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'app.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import os
import numpy as np
import pandas as pd
import matplotlib.image as mpimg
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
from scipy import ndimage
import sys


IMG_WIDTH = 1440
IMG_HEIGHT = 1080
work_path = ""
save_path = ""
centers = []
coefficients = []


# def poly6(x, b, c, d, e, f, g):
#    return 1 + b * x + c * x**2 + d * x**3 + e * x**4 + f * x**5 + g * x**6
def poly6(x, b, c, e, g):
    return 1 + b * x + c * x**2 + e * x**4 + g * x**6


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(543, 432)
        MainWindow.setStyleSheet("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 20, 540, 50))
        font = QtGui.QFont()
        font.setFamily("Ubuntu Mono")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setStyleSheet("")
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.text = QtWidgets.QTextBrowser(self.centralwidget)
        self.text.setGeometry(QtCore.QRect(15, 65, 520, 300))
        self.text.setStyleSheet("")
        self.text.setObjectName("text")
        self.btn_start = QtWidgets.QPushButton(self.centralwidget)
        self.btn_start.setEnabled(False)
        self.btn_start.setGeometry(QtCore.QRect(15, 370, 150, 30))
        self.btn_start.setObjectName("btn_start")
        self.btn_clear = QtWidgets.QPushButton(self.centralwidget)
        self.btn_clear.setGeometry(QtCore.QRect(425, 370, 110, 30))
        self.btn_clear.setObjectName("btn_clear")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(-3, 400, 550, 20))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.btn_open = QtWidgets.QPushButton(self.centralwidget)
        self.btn_open.setGeometry(QtCore.QRect(0, 0, 80, 25))
        self.btn_open.setAutoFillBackground(False)
        self.btn_open.setStyleSheet("")
        self.btn_open.setObjectName("btn_open")
        self.btn_save = QtWidgets.QPushButton(self.centralwidget)
        self.btn_save.setEnabled(False)
        self.btn_save.setGeometry(QtCore.QRect(80, 0, 90, 25))
        self.btn_save.setObjectName("btn_save")
        self.line_2 = QtWidgets.QFrame(self.centralwidget)
        self.line_2.setGeometry(QtCore.QRect(-3, 9, 550, 30))
        self.line_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.line_2.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line_2.setObjectName("line_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusBar = QtWidgets.QStatusBar(MainWindow)
        self.statusBar.setObjectName("statusBar")
        MainWindow.setStatusBar(self.statusBar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Vignette Finder"))
        self.label.setText(_translate("MainWindow", "Определение параметров виньеттирования"))
        self.text.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'Ubuntu\'; font-size:11pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" color:#000000;\">"
                                                   "Чтобы начать, откройте директорию с фотографиями</span></p></body></html>"))

        self.btn_open.setText(_translate("MainWindow", "Открыть"))
        self.btn_open.clicked.connect(self.open_file)
        self.btn_start.setText(_translate("MainWindow", "Запустить скрипт"))
        self.btn_start.clicked.connect(self.finder)
        self.btn_clear.setText(_translate("MainWindow", "Очистить"))
        self.btn_clear.clicked.connect(self.text.clear)
        self.btn_save.setText(_translate("MainWindow", "Сохранить"))

    def open_file(self):
        folder = QtWidgets.QFileDialog.getExistingDirectory(None, "Выберите директорию")
        if folder:
            self.text.append("Выбрана следующая директория: {}".format(folder))
            self.btn_start.setEnabled(True)
            os.chdir(folder)
            QtWidgets.qApp.processEvents()

    def finder(self):
        avg_arr = []
        allfiles = os.listdir(os.getcwd())
        img_list = [filename for filename in allfiles if filename.startswith("img") and filename.endswith(".tif")]
        img_list.sort()

        string = "Найдены следующие изображения: "
        for img in img_list:
            string += "{} ".format(img)
        self.text.append(string)

        self.text.append("Изображения усредняются...")
        QtWidgets.qApp.processEvents()
        for i in range(5):
            names = [name for name in img_list if "img{}_".format(i) in name]
            images = np.array([np.array(mpimg.imread(name)) for name in names])
            avg = np.array(np.mean(images, axis=0), dtype='uint16')
            avg_arr.append(avg)
        self.text.append("Изображения усреднены")
        QtWidgets.qApp.processEvents()

        for i in range(5):
            note = ("Центр виньетирования для канала {}: ".format(i))
            image = avg_arr[i].T
            image = image - 3840.0  # blacklevel

            com = ndimage.center_of_mass(image)
            xc = int(com[0])
            yc = int(com[1])
            note += str(xc)+", "+str(yc)
            self.text.append(note)
            QtWidgets.qApp.processEvents()

            note = "Коэффициенты полинома: "
            Vref = image[xc - 5:xc + 6, yc - 5:yc + 6].mean()

            Vx = np.empty(IMG_WIDTH)
            fo_r = []
            fo_v = []
            j = 0
            k = 0
            while j < IMG_WIDTH:
                while k < IMG_HEIGHT:
                    Vx[j] = image[j, k] / Vref
                    if Vx[j] < 1.2:
                        r = ((j - xc) ** 2 + (k - yc) ** 2) ** (1 / 2)
                        fo_r.append(r)
                        fo_v.append(str(Vx[j]))
                    k = k + 1
                k = 0
                j = j + 1

            df0 = np.vstack((fo_r, fo_v)).T
            df0 = df0.astype(np.float64)
            df0 = pd.DataFrame(df0, columns=['r', 'V'])

            popt, pcov = curve_fit(poly6, df0['r'], df0['V'])

            err_arr = []
            checks = str(popt)[1:-1].split()
            checks.insert(2, "0")
            checks.insert(4, "0")
            note += str(checks)
            print(checks)
            if float(checks[0]) < -10e-05 or float(checks[0]) > 10e-05:
                err_arr.append(0)
            if float(checks[1]) < -10e-07 or float(checks[1]) > 10e-07:
                err_arr.append(1)
            if float(checks[3]) < -10e-13 or float(checks[3]) > 10e-13:
                err_arr.append(3)
            if float(checks[5]) < -10e-19 or float(checks[5]) > 10e-19:
                err_arr.append(5)
            if len(err_arr) != 0:
                note += " (потенциально некачественные: "
                for err in err_arr:
                    note += str(checks[err]) + " "
                note += ")"

            note = note.replace("'", "")
            note = note.replace(",", "")
            note = note.replace("[", "")
            note = note.replace("]", "")
            self.text.append(note)
            QtWidgets.qApp.processEvents()

            v0 = poly6(df0['r'], *popt)
            plt.plot(df0['r'], v0, color='red')

        self.text.append("Скрипт завершен, сохраните данные")
        QtWidgets.qApp.processEvents()
        self.btn_save.setEnabled(True)

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
